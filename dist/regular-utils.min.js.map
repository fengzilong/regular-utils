{"version":3,"file":null,"sources":["../node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js","../src/filters/price.js"],"sourcesContent":["function buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'less than a second',\n      other: 'less than {{count}} seconds'\n    },\n\n    halfAMinute: 'half a minute',\n\n    lessThanXMinutes: {\n      one: 'less than a minute',\n      other: 'less than {{count}} minutes'\n    },\n\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n\n    aboutXHours: {\n      one: 'about 1 hour',\n      other: 'about {{count}} hours'\n    },\n\n    xDays: {\n      one: '1 day',\n      other: '{{count}} days'\n    },\n\n    aboutXMonths: {\n      one: 'about 1 month',\n      other: 'about {{count}} months'\n    },\n\n    xMonths: {\n      one: '1 month',\n      other: '{{count}} months'\n    },\n\n    aboutXYears: {\n      one: 'about 1 year',\n      other: 'about {{count}} years'\n    },\n\n    overXYears: {\n      one: 'over 1 year',\n      other: 'over {{count}} years'\n    },\n\n    almostXYears: {\n      one: 'almost 1 year',\n      other: 'almost {{count}} years'\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var result\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token]\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'in ' + result\n      } else {\n        return result + ' ago'\n      }\n    }\n\n    return result\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n","export default function ( value ) {\r\n\treturn divide( String( value ), 3 ).join( ',' );\r\n}\r\n\r\nfunction divide( str, len ) {\r\n\tconst result = [];\r\n\r\n\tstr = str.split( '' );\r\n\r\n\tif ( str.length % len > 0 ) {\r\n\t\tconst first = str.splice( 0, str.length % len );\r\n\t\tresult.push( first );\r\n\t}\r\n\r\n\tlet tmp = str.splice( 0, len );\r\n\twhile ( tmp.length > 0 ) {\r\n\t\tresult.push( tmp );\r\n\t\ttmp = str.splice( 0, len );\r\n\t}\r\n\r\n\treturn result.map( v => v.join( '' ) );\r\n}\r\n"],"names":[],"mappings":"y4FAAA,+yFCAA"}